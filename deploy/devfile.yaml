# METADATA

metadata:
  description: Stack with Node.js 14
  displayName: Node.js Runtime
  icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
  language: javascript
  name: deploy-test-app
  projectType: nodejs
  tags:
    - NodeJS
    - Express
    - ubi8
  version: 1.0.1
schemaVersion: 2.2.0
starterProjects:
  - git:
      remotes:
        origin: https://github.com/odo-devfiles/nodejs-ex.git
    name: nodejs-starter
variables:
  CONTAINER_IMAGE: cdrage/deploy-odo-test


commands:
  #
  # DEV
  #
  - id: install
    exec:
      commandLine: npm install
      component: runtime
      group:
        isDefault: true
        kind: build
      workingDir: /project

  - id: run
    exec:
      commandLine: npm start
      component: runtime
      group:
        isDefault: true
        kind: run
      workingDir: /project

  - id: debug
    exec:
      commandLine: npm run debug
      component: runtime
      group:
        isDefault: true
        kind: debug
      workingDir: /project

  - id: test
    exec:
      commandLine: npm test
      component: runtime
      group:
        isDefault: true
        kind: test
      workingDir: /project

  #
  # DEPLOY
  #
  - id: deploy
    composite:
      commands:
        - build-image
        - deployk8s
        - deployknative
      group:
        kind: deploy
        isDefault: true

  - id: build-image
    apply:
      component: outerloop-build

  - id: deployk8s
    apply:
      component: outerloop-deploy

  - id: deployknative
    apply:
      component: outerloop-knative


components:
  - name: runtime
    container:
      endpoints:
      - name: http-3000
        targetPort: 3000
      image: registry.access.redhat.com/ubi8/nodejs-14:latest
      memoryLimit: 1024Mi
      mountSources: true
      sourceMapping: /project

  - name: outerloop-build
    image:
      imageName: "{{CONTAINER_IMAGE}}"
      dockerfile:
        uri: ./Dockerfile
        buildContext: ${PROJECTS_ROOT}
        rootRequired: false
    
  - name: outerloop-deploy
    kubernetes:
      inlined: |
        kind: Deployment
        apiVersion: apps/v1
        metadata:
          name: my-awesome-component
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: node-app
          template:
            metadata:
              labels:
                app: node-app
            spec:
              containers:
                - name: main
                  image: {{CONTAINER_IMAGE}}
                  resources:
                    limits:
                      memory: "128Mi"
                      cpu: "500m"

  - name: outerloop-knative
    kubernetes:
      inlined: |
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: helloworld-go
        spec:
          template:
            spec:
              containers:
              - image: {{CONTAINER_IMAGE}}
                ports:
                  - containerPort: 3000

